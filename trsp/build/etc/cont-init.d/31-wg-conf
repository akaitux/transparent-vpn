#!/command/with-contenv bash

generate_confs () {
  mkdir -p /opt/wireguard/config/server
  if [ ! -f /opt/wireguard/config/server/privatekey-server ]; then
    umask 077
    wg genkey | tee /opt/wireguard/config/server/privatekey-server | wg pubkey > /opt/wireguard/config/server/publickey-server
  fi
  eval "`printf %s`
  cat <<DUDE > /opt/wireguard/config/wg0.conf
`cat /opt/wireguard/templates/server.conf`

DUDE"

  for i in ${PEERS_ARRAY[@]}; do
    if [[ "${i}" =~ ^[0-9]+$ ]]; then
      PEER_ID="peer${i}"
    else
      PEER_ID="peer_${i//[^[:alnum:]_-]/}"
    fi
    mkdir -p /opt/wireguard/config/${PEER_ID}
    if [ ! -f "/opt/wireguard/config/${PEER_ID}/privatekey-${PEER_ID}" ]; then
      umask 077
      wg genkey | tee /opt/wireguard/config/${PEER_ID}/privatekey-${PEER_ID} | wg pubkey > /opt/wireguard/config/${PEER_ID}/publickey-${PEER_ID}
    fi
    if [ -f "/opt/wireguard/config/${PEER_ID}/${PEER_ID}.conf" ]; then
      CLIENT_IP=$(cat /opt/wireguard/config/${PEER_ID}/${PEER_ID}.conf | grep "Address" | awk '{print $NF}')
      if [ -n "${ORIG_INTERFACE}" ] && [ "${INTERFACE}" != "${ORIG_INTERFACE}" ]; then
        CLIENT_IP=$(echo "${CLIENT_IP}" | sed "s|${ORIG_INTERFACE}|${INTERFACE}|")
      fi
    else
      for idx in {2..254}; do
        PROPOSED_IP="${INTERFACE}.${idx}"
        if ! grep -s -q -R "${PROPOSED_IP}" /opt/wireguard/config/peer*/*.conf  && ([ -z "${ORIG_INTERFACE}" ] || ! grep -s -q -R "${ORIG_INTERFACE}.${idx}" /opt/wireguard/config/peer*/*.conf) ; then
          CLIENT_IP="${PROPOSED_IP}"
          break
        fi
      done
    fi
    eval "`printf %s`
    cat <<DUDE > /opt/wireguard/config/${PEER_ID}/${PEER_ID}.conf
`cat /opt/wireguard/templates/peer.conf`
DUDE"
    SERVER_ALLOWEDIPS=SERVER_ALLOWEDIPS_PEER_${i}
    if [ -n "${!SERVER_ALLOWEDIPS}" ]; then
      echo "Adding ${!SERVER_ALLOWEDIPS} to wg0.conf's AllowedIPs for peer ${i}"
      cat <<DUDE >> /opt/wireguard/config/wg0.conf
[Peer]
# ${PEER_ID}
PublicKey = $(cat /opt/wireguard/config/${PEER_ID}/publickey-${PEER_ID})
AllowedIPs = ${CLIENT_IP}/32,${!SERVER_ALLOWEDIPS}

DUDE
    else
      cat <<DUDE >> /opt/wireguard/config/wg0.conf
[Peer]
# ${PEER_ID}
PublicKey = $(cat /opt/wireguard/config/${PEER_ID}/publickey-${PEER_ID})
AllowedIPs = ${CLIENT_IP}/32

DUDE
    fi
  done
}

save_vars () {
  cat <<DUDE > /opt/wireguard/config/.donoteditthisfile
ORIG_SERVERURL="$WG_SERVERURL"
ORIG_SERVERPORT="$WG_SERVERPORT"
ORIG_PEERDNS="$WG_PEERDNS"
ORIG_PEERS="$WG_PEERS"
ORIG_INTERFACE="$INTERFACE"
ORIG_ALLOWEDIPS="$WG_ALLOWEDIPS"
DUDE
}


### ENTRYPOINT ###

# prepare symlinks
rm -rf /etc/wireguard
mkdir -p /etc/wireguard
ln -s /opt/wireguard/config/wg0.conf /etc/wireguard/wg0.conf
# prepare templates
[[ ! -f /opt/wireguard/templates/server.conf ]] && \
  cp /opt/wireguard/defaults/server.conf /opt/wireguard/templates/server.conf
[[ ! -f /opt/wireguard/templates/peer.conf ]] && \
  cp /opt/wireguard/defaults/peer.conf /opt/wireguard/templates/peer.conf


if [[ -z "$WG_PEERS" ]]; then
    WG_PEERS="100"
fi

echo "**** Server mode is selected ****"
if [[ "$WG_PEERS" =~ ^[0-9]+$ ]] && ! [[ "$WG_PEERS" =~ *,* ]]; then
    PEERS_ARRAY=($(seq 1 $WG_PEERS))
else
    PEERS_ARRAY=($(echo "$WG_PEERS" | tr ',' ' '))
fi

if [ -z "$WG_SERVERURL" ] || [ "$WG_SERVERURL" = "auto" ]; then
    WG_SERVERURL=$(curl -s icanhazip.com)
    echo "**** WG_SERVERURL var is either not set or is set to \"auto\", setting external IP to auto detected value of $WG_SERVERURL ****"
else
    echo "**** External server address is set to $WG_SERVERURL ****"
fi

WG_SERVERPORT=${WG_SERVERPORT:-51820}

echo "**** External server port is set to ${WG_SERVERPORT}. Make sure that port is properly forwarded to port 51820 inside this container ****"

INTERNAL_SUBNET="${WG_INTERNAL_SUBNET:-10.224.0.0/16}"

echo "**** Internal subnet is set to $INTERNAL_SUBNET ****"

INTERFACE=$(echo "$INTERNAL_SUBNET" | awk 'BEGIN{FS=OFS="."} NF--')
WG_ALLOWEDIPS=${WG_ALLOWEDIPS:-0.0.0.0/0}

echo "**** AllowedIPs for peers $WG_ALLOWEDIPS ****"

if [ -z "$WG_PEERDNS" ] || [ "$WG_PEERDNS" = "auto" ]; then
    WG_PEERDNS="${INTERFACE}.1"
    echo "**** WG_PEERDNS var is either not set or is set to \"auto\", setting peer DNS to ${INTERFACE}.1 to use wireguard docker host's DNS. ****"
else
    echo "**** Peer DNS servers will be set to $WG_PEERDNS ****"
fi

if [ ! -f /opt/wireguard/config/wg0.conf ]; then
    echo "**** No wg0.conf found (maybe an initial install), generating 1 server and ${WG_PEERS} peer/client confs ****"
    generate_confs
    save_vars
else
    echo "**** Server mode is selected ****"
    [[ -f /opt/wireguard/config/.donoteditthisfile ]] && \
      . /opt/wireguard/config/.donoteditthisfile
    if [ "$WG_SERVERURL" != "$ORIG_SERVERURL" ] || [ "$WG_SERVERPORT" != "$ORIG_SERVERPORT" ] || [ "$WG_PEERDNS" != "$ORIG_PEERDNS" ] || [ "$WG_PEERS" != "$ORIG_PEERS" ] || [ "$INTERFACE" != "$ORIG_INTERFACE" ] || [ "$WG_ALLOWEDIPS" != "$ORIG_ALLOWEDIPS" ]; then
          echo "**** Server related environment variables changed, regenerating 1 server and ${WG_PEERS} peer/client confs ****"
          generate_confs
          save_vars
    else
      echo "**** No changes to parameters. Existing configs are used. ****"
    fi
fi

